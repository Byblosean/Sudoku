using UnityEngine;
using UnityEngine.UI;

public class FieldPrefabObject
{
    private int _row;
    private int _column;
    private GameObject _instance;
    private bool _userChanged = false;

    public FieldPrefabObject(GameObject instance, int row, int column)
    {
        _instance = instance;
        Row = row;
        Column = column;
    }

    public bool IsChangeAble = true;

    public bool UserChanged => _userChanged;


    public void ClearNumber()
    {
        if (TryGetTextByName("Value", out Text text))
        {
            text.text = "";
            Number = 0;
            _userChanged = false;
        }


        for (int i = 1; i < 10; i++)
        {
            if (TryGetTextByName($"Number_{i}", out Text smallNumberText))
            {
                smallNumberText.text = "";
            }
        }
    }

    public void ClearWrong()
    {
        if (TryGetTextByName("Value", out Text text))
        {
            text.text = "";
            Number = 0;
            _userChanged = false;
        }
    }


    public void SetUserChanged(bool changed)
    {
        _userChanged = changed;
    }

    public void ChangeColorToGreen()
    {
        _instance.GetComponent<Image>().color = Color.green;
    }



    public void ChangeColorToWhite()
    {
        _instance.GetComponent<Image>().color = Color.white;
    }
    public void ChangeTextToBlue()
    {
        if (TryGetTextByName("Value", out Text text))
        {
            Color textColor;
            if (ColorUtility.TryParseHtmlString("#002F82", out textColor))
            {
                text.color = textColor;
            }
            else
            {
                Debug.LogWarning("Failed to parse color.");
            }
        }
    }

    public void ChangeTextToBlack()
    {
        if (TryGetTextByName("Value", out Text text))
        {
            Color textColor;
            if (ColorUtility.TryParseHtmlString("#323232", out textColor))
            {
                text.color = textColor;
            }
            else
            {
                Debug.LogWarning("Failed to parse color.");
            }
        }
    }


    public void ChangeColorToRed()
    {
        _instance.GetComponent<Image>().color = Color.red;
    }

    public void HighlightYellow()
    {

        _instance.GetComponent<Image>().color = new Color(1f, 0.9264817f, 0.6094339f);
    }

    public void UnhighlightYellow()
    {

        _instance.GetComponent<Image>().color = Color.white;
    }

    public void HighlightBlue()
    {

        _instance.GetComponent<Image>().color = new Color(0.6705883f, 0.9490196f, 0.9607843f);
    }

    public void UnhighlightBlue()
    {
        // Возврат к исходному цвету
        _instance.GetComponent<Image>().color = Color.white;
    }



    public bool TryGetTextByName(string name, out Text text)
    {
        text = null;
        Text[] texts = _instance.GetComponentsInChildren<Text>();
        foreach (var currentText in texts)
        {
            if (currentText.name.Equals(name))
            {
                text = currentText;
                return true;
            }
        }
        return false;
    }

    public int Row { get => _row; set => _row = value; }
    public int Column { get => _column; set => _column = value; }

    public void SetHoverMode()
    {
        _instance.GetComponent<Image>().color = new Color(0.70f, 0.99f, 99f);
    }

    public void UnSetHoverMode()
    {
        _instance.GetComponent<Image>().color = new Color(1f, 1f, 1f);
    }

    public void Highlight()
    {
        _instance.GetComponent<Image>().color = new Color(0.8962264f, 1f, 0.992217f);
    }

    public void Unhighlight()
    {
        _instance.GetComponent<Image>().color = Color.white;
    }


    public int Number;

    public void SetNumber(int number)
    {
        if (TryGetTextByName("Value", out Text text))
        {
            Number = number;
            text.text = number.ToString();
            _userChanged = true;
            for (int i = 1; i < 10; i++)
            {
                if (TryGetTextByName($"Number_{i}", out Text textNumber))
                {
                    textNumber.text = "";
                }
            }
        }
    }

    public void SetSmallNumber(int number)
    {
        if (TryGetTextByName($"Number_{number}", out Text text))
        {
            text.text = number.ToString();
            if (TryGetTextByName("Value", out Text textValue))
            {
                textValue.text = "";
            }
        }
    }
}
